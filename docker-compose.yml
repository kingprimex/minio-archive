services:
  app:
    build: .
    container_name: s3-archive
    command: flask --app main.py --debug run --host 0.0.0.0
    environment:
      KAFKA_BOOTSTRAP_SERVERS: 'kafka:9092'
      KAFKA_TOPIC: 'string-topic'
      MINIO_ENDPOINT_URL: 'http://minio:9000'
      MINIO_ACCESS_KEY_ID: 'minio'
      MINIO_SECRET_ACCESS_KEY: 'minio123'
    ports:
      - 8080:5000
    volumes:
      - .:/app
  kafka:
    image: 'bitnami/kafka:3.2.3'
    restart: "no"
    privileged: true
    ports:
      - 2181:2181
      - 9092:9092
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms128M -Xmx128M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "kafka"
  minio:
    image: quay.io/minio/minio
    container_name: minio
    command: server /minio-data --console-address ":9090"
    environment:
      MINIO_ROOT_USER: "minio"
      MINIO_ROOT_PASSWORD: "minio123"
    volumes:
      - ./minio-data:/minio-data
    ports:
      - 9001:9000
      - 9090:9090